(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.observer = {}));
})(this, (function (exports) { 'use strict';

    var EventHandle = function () {
      function EventHandle(owner, name, fn) {
        this.owner = void 0;
        this.name = void 0;
        this.fn = void 0;
        this.owner = owner;
        this.name = name;
        this.fn = fn;
      }
      var _proto = EventHandle.prototype;
      _proto.unbind = function unbind() {
        if (!this.owner) return;
        this.owner.unbind(this.name, this.fn);
        this.owner = null;
        this.name = null;
        this.fn = null;
      };
      _proto.call = function call() {
        if (!this.fn) return;
        this.fn.call(this.owner, arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      };
      _proto.on = function on(name, fn) {
        return this.owner.on(name, fn);
      };
      return EventHandle;
    }();

    function asyncGeneratorStep(n, t, e, r, o, a, c) {
      try {
        var i = n[a](c),
          u = i.value;
      } catch (n) {
        return void e(n);
      }
      i.done ? t(u) : Promise.resolve(u).then(r, o);
    }
    function _asyncToGenerator(n) {
      return function () {
        var t = this,
          e = arguments;
        return new Promise(function (r, o) {
          var a = n.apply(t, e);
          function _next(n) {
            asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
          }
          function _throw(n) {
            asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
          }
          _next(void 0);
        });
      };
    }
    function _defineProperties(e, r) {
      for (var t = 0; t < r.length; t++) {
        var o = r[t];
        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r, t) {
      return r && _defineProperties(e.prototype, r), Object.defineProperty(e, "prototype", {
        writable: !1
      }), e;
    }
    function _inheritsLoose(t, o) {
      t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
    }
    function _regeneratorRuntime() {
      _regeneratorRuntime = function () {
        return e;
      };
      var t,
        e = {},
        r = Object.prototype,
        n = r.hasOwnProperty,
        o = Object.defineProperty || function (t, e, r) {
          t[e] = r.value;
        },
        i = "function" == typeof Symbol ? Symbol : {},
        a = i.iterator || "@@iterator",
        c = i.asyncIterator || "@@asyncIterator",
        u = i.toStringTag || "@@toStringTag";
      function define(t, e, r) {
        return Object.defineProperty(t, e, {
          value: r,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), t[e];
      }
      try {
        define({}, "");
      } catch (t) {
        define = function (t, e, r) {
          return t[e] = r;
        };
      }
      function wrap(t, e, r, n) {
        var i = e && e.prototype instanceof Generator ? e : Generator,
          a = Object.create(i.prototype),
          c = new Context(n || []);
        return o(a, "_invoke", {
          value: makeInvokeMethod(t, r, c)
        }), a;
      }
      function tryCatch(t, e, r) {
        try {
          return {
            type: "normal",
            arg: t.call(e, r)
          };
        } catch (t) {
          return {
            type: "throw",
            arg: t
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart",
        l = "suspendedYield",
        f = "executing",
        s = "completed",
        y = {};
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
      var p = {};
      define(p, a, function () {
        return this;
      });
      var d = Object.getPrototypeOf,
        v = d && d(d(values([])));
      v && v !== r && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t) {
        ["next", "throw", "return"].forEach(function (e) {
          define(t, e, function (t) {
            return this._invoke(e, t);
          });
        });
      }
      function AsyncIterator(t, e) {
        function invoke(r, o, i, a) {
          var c = tryCatch(t[r], t, o);
          if ("throw" !== c.type) {
            var u = c.arg,
              h = u.value;
            return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
              invoke("next", t, i, a);
            }, function (t) {
              invoke("throw", t, i, a);
            }) : e.resolve(h).then(function (t) {
              u.value = t, i(u);
            }, function (t) {
              return invoke("throw", t, i, a);
            });
          }
          a(c.arg);
        }
        var r;
        o(this, "_invoke", {
          value: function (t, n) {
            function callInvokeWithMethodAndArg() {
              return new e(function (e, r) {
                invoke(t, n, e, r);
              });
            }
            return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e, r, n) {
        var o = h;
        return function (i, a) {
          if (o === f) throw Error("Generator is already running");
          if (o === s) {
            if ("throw" === i) throw a;
            return {
              value: t,
              done: !0
            };
          }
          for (n.method = i, n.arg = a;;) {
            var c = n.delegate;
            if (c) {
              var u = maybeInvokeDelegate(c, n);
              if (u) {
                if (u === y) continue;
                return u;
              }
            }
            if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
              if (o === h) throw o = s, n.arg;
              n.dispatchException(n.arg);
            } else "return" === n.method && n.abrupt("return", n.arg);
            o = f;
            var p = tryCatch(e, r, n);
            if ("normal" === p.type) {
              if (o = n.done ? s : l, p.arg === y) continue;
              return {
                value: p.arg,
                done: n.done
              };
            }
            "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
          }
        };
      }
      function maybeInvokeDelegate(e, r) {
        var n = r.method,
          o = e.iterator[n];
        if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
        var i = tryCatch(o, e.iterator, r.arg);
        if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
        var a = i.arg;
        return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
      }
      function pushTryEntry(t) {
        var e = {
          tryLoc: t[0]
        };
        1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
      }
      function resetTryEntry(t) {
        var e = t.completion || {};
        e.type = "normal", delete e.arg, t.completion = e;
      }
      function Context(t) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t.forEach(pushTryEntry, this), this.reset(!0);
      }
      function values(e) {
        if (e || "" === e) {
          var r = e[a];
          if (r) return r.call(e);
          if ("function" == typeof e.next) return e;
          if (!isNaN(e.length)) {
            var o = -1,
              i = function next() {
                for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
                return next.value = t, next.done = !0, next;
              };
            return i.next = i;
          }
        }
        throw new TypeError(typeof e + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: !0
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: !0
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
        var e = "function" == typeof t && t.constructor;
        return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
      }, e.mark = function (t) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
      }, e.awrap = function (t) {
        return {
          __await: t
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
        return this;
      }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
        void 0 === i && (i = Promise);
        var a = new AsyncIterator(wrap(t, r, n, o), i);
        return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
          return t.done ? t.value : a.next();
        });
      }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
        return this;
      }), define(g, "toString", function () {
        return "[object Generator]";
      }), e.keys = function (t) {
        var e = Object(t),
          r = [];
        for (var n in e) r.push(n);
        return r.reverse(), function next() {
          for (; r.length;) {
            var t = r.pop();
            if (t in e) return next.value = t, next.done = !1, next;
          }
          return next.done = !0, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function (e) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
        },
        stop: function () {
          this.done = !0;
          var t = this.tryEntries[0].completion;
          if ("throw" === t.type) throw t.arg;
          return this.rval;
        },
        dispatchException: function (e) {
          if (this.done) throw e;
          var r = this;
          function handle(n, o) {
            return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
          }
          for (var o = this.tryEntries.length - 1; o >= 0; --o) {
            var i = this.tryEntries[o],
              a = i.completion;
            if ("root" === i.tryLoc) return handle("end");
            if (i.tryLoc <= this.prev) {
              var c = n.call(i, "catchLoc"),
                u = n.call(i, "finallyLoc");
              if (c && u) {
                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
              } else if (c) {
                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              } else {
                if (!u) throw Error("try statement without catch or finally");
                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
              }
            }
          }
        },
        abrupt: function (t, e) {
          for (var r = this.tryEntries.length - 1; r >= 0; --r) {
            var o = this.tryEntries[r];
            if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
              var i = o;
              break;
            }
          }
          i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
          var a = i ? i.completion : {};
          return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
        },
        complete: function (t, e) {
          if ("throw" === t.type) throw t.arg;
          return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
        },
        finish: function (t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
          }
        },
        catch: function (t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.tryLoc === t) {
              var n = r.completion;
              if ("throw" === n.type) {
                var o = n.arg;
                resetTryEntry(r);
              }
              return o;
            }
          }
          throw Error("illegal catch attempt");
        },
        delegateYield: function (e, r, n) {
          return this.delegate = {
            iterator: values(e),
            resultName: r,
            nextLoc: n
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    function _setPrototypeOf(t, e) {
      return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
        return t.__proto__ = e, t;
      }, _setPrototypeOf(t, e);
    }
    function _toPrimitive(t, r) {
      if ("object" != typeof t || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r );
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (String )(t);
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == typeof i ? i : i + "";
    }

    var Events = function () {
      function Events() {
        this._suspendEvents = false;
        this._additionalEmitters = [];
        Object.defineProperty(this, '_events', {
          enumerable: false,
          configurable: false,
          writable: true,
          value: {}
        });
      }
      var _proto = Events.prototype;
      _proto.on = function on(name, fn) {
        var events = this._events[name];
        if (events === undefined) {
          this._events[name] = [fn];
        } else {
          if (events.indexOf(fn) === -1) events.push(fn);
        }
        return new EventHandle(this, name, fn);
      };
      _proto.once = function once(name, fn) {
        var _this = this;
        var evt = this.on(name, function (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
          fn.call(_this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
          evt.unbind();
        });
        return evt;
      };
      _proto.emit = function emit(name, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
        if (this._suspendEvents) return this;
        var events = this._events[name];
        if (events && events.length) {
          events = events.slice(0);
          for (var i = 0; i < events.length; i++) {
            if (!events[i]) continue;
            try {
              events[i].call(this, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            } catch (ex) {
              console.info('%c%s %c(event error)', 'color: #06f', name, 'color: #f00');
              console.log(ex.stack);
            }
          }
        }
        if (this._additionalEmitters.length) {
          var emitters = this._additionalEmitters.slice();
          emitters.forEach(function (emitter) {
            emitter.emit(name, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
          });
        }
        return this;
      };
      _proto.unbind = function unbind(name, fn) {
        if (name) {
          var events = this._events[name];
          if (!events) return this;
          if (fn) {
            var i = events.indexOf(fn);
            if (i !== -1) {
              if (events.length === 1) {
                delete this._events[name];
              } else {
                events.splice(i, 1);
              }
            }
          } else {
            delete this._events[name];
          }
        } else {
          this._events = {};
        }
        return this;
      };
      _proto.addEmitter = function addEmitter(emitter) {
        if (!this._additionalEmitters.includes(emitter)) {
          this._additionalEmitters.push(emitter);
        }
      };
      _proto.removeEmitter = function removeEmitter(emitter) {
        var idx = this._additionalEmitters.indexOf(emitter);
        if (idx !== -1) {
          this._additionalEmitters.splice(idx, 1);
        }
      };
      return _createClass(Events, [{
        key: "suspendEvents",
        get: function get() {
          return this._suspendEvents;
        },
        set: function set(value) {
          this._suspendEvents = !!value;
        }
      }]);
    }();

    var History = function (_Events) {
      function History() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Events.call.apply(_Events, [this].concat(args)) || this;
        _this._executing = 0;
        _this._actions = [];
        _this._currentActionIndex = -1;
        _this._canUndo = false;
        _this._canRedo = false;
        return _this;
      }
      _inheritsLoose(History, _Events);
      var _proto = History.prototype;
      _proto.add = function add(action) {
        if (!action.name) {
          console.error('Trying to add history action without name');
          return false;
        }
        if (!action.undo) {
          console.error('Trying to add history action without undo method', action.name);
          return false;
        }
        if (!action.redo) {
          console.error('Trying to add history action without redo method', action.name);
          return false;
        }
        if (this._currentActionIndex !== this._actions.length - 1) {
          this._actions = this._actions.slice(0, this._currentActionIndex + 1);
        }
        if (action.combine && this.currentAction && this.currentAction.name === action.name) {
          this.currentAction.redo = action.redo;
        } else {
          var length = this._actions.push(action);
          this._currentActionIndex = length - 1;
        }
        this.emit('add', action.name);
        this.canUndo = true;
        this.canRedo = false;
        return true;
      };
      _proto.addAndExecute = function () {
        var _addAndExecute = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(action) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!this.add(action)) {
                  _context.next = 8;
                  break;
                }
                _context.prev = 1;
                this.executing++;
                _context.next = 5;
                return action.redo();
              case 5:
                _context.prev = 5;
                this.executing--;
                return _context.finish(5);
              case 8:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[1,, 5, 8]]);
        }));
        function addAndExecute(_x) {
          return _addAndExecute.apply(this, arguments);
        }
        return addAndExecute;
      }();
      _proto.undo = function () {
        var _undo = _asyncToGenerator(_regeneratorRuntime().mark(function _callee2() {
          var name, undo;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (this.canUndo) {
                  _context2.next = 2;
                  break;
                }
                return _context2.abrupt("return");
              case 2:
                name = this.currentAction.name;
                undo = this.currentAction.undo;
                this._currentActionIndex--;
                this.emit('undo', name);
                if (this._currentActionIndex < 0) {
                  this.canUndo = false;
                }
                this.canRedo = true;
                _context2.prev = 8;
                this.executing++;
                _context2.next = 12;
                return undo();
              case 12:
                _context2.next = 18;
                break;
              case 14:
                _context2.prev = 14;
                _context2.t0 = _context2["catch"](8);
                console.info('%c(History#undo)', 'color: #f00');
                console.log(_context2.t0.stack);
              case 18:
                _context2.prev = 18;
                this.executing--;
                return _context2.finish(18);
              case 21:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this, [[8, 14, 18, 21]]);
        }));
        function undo() {
          return _undo.apply(this, arguments);
        }
        return undo;
      }();
      _proto.redo = function () {
        var _redo = _asyncToGenerator(_regeneratorRuntime().mark(function _callee3() {
          var redo;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (this.canRedo) {
                  _context3.next = 2;
                  break;
                }
                return _context3.abrupt("return");
              case 2:
                this._currentActionIndex++;
                redo = this.currentAction.redo;
                this.emit('redo', this.currentAction.name);
                this.canUndo = true;
                if (this._currentActionIndex === this._actions.length - 1) {
                  this.canRedo = false;
                }
                _context3.prev = 7;
                this.executing++;
                _context3.next = 11;
                return redo();
              case 11:
                _context3.next = 17;
                break;
              case 13:
                _context3.prev = 13;
                _context3.t0 = _context3["catch"](7);
                console.info('%c(History#redo)', 'color: #f00');
                console.log(_context3.t0.stack);
              case 17:
                _context3.prev = 17;
                this.executing--;
                return _context3.finish(17);
              case 20:
              case "end":
                return _context3.stop();
            }
          }, _callee3, this, [[7, 13, 17, 20]]);
        }));
        function redo() {
          return _redo.apply(this, arguments);
        }
        return redo;
      }();
      _proto.clear = function clear() {
        if (!this._actions.length) return;
        this._actions.length = 0;
        this._currentActionIndex = -1;
        this.canUndo = false;
        this.canRedo = false;
      };
      return _createClass(History, [{
        key: "currentAction",
        get: function get() {
          return this._actions[this._currentActionIndex] || null;
        }
      }, {
        key: "lastAction",
        get: function get() {
          return this._actions[this._actions.length - 1] || null;
        }
      }, {
        key: "canUndo",
        get: function get() {
          return this._canUndo && !this.executing;
        },
        set: function set(value) {
          if (this._canUndo === value) return;
          this._canUndo = value;
          if (!this.executing) {
            this.emit('canUndo', value);
          }
        }
      }, {
        key: "canRedo",
        get: function get() {
          return this._canRedo && !this.executing;
        },
        set: function set(value) {
          if (this._canRedo === value) return;
          this._canRedo = value;
          if (!this.executing) {
            this.emit('canRedo', value);
          }
        }
      }, {
        key: "executing",
        get: function get() {
          return this._executing;
        },
        set: function set(value) {
          if (this._executing === value) return;
          this._executing = value;
          if (this._executing) {
            this.emit('canUndo', false);
            this.emit('canRedo', false);
          } else {
            this.emit('canUndo', this._canUndo);
            this.emit('canRedo', this._canRedo);
          }
        }
      }]);
    }(Events);

    var arrayEquals = function arrayEquals(a, b) {
      if (!a || !b) {
        return false;
      }
      var l = a.length;
      if (l !== b.length) {
        return false;
      }
      for (var i = 0; i < l; i++) {
        if (a[i] instanceof Array && b[i] instanceof Array) {
          if (!arrayEquals(a[i], b[i])) {
            return false;
          }
        } else if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    };

    var Observer = function (_Events) {
      function Observer(data, options) {
        var _this;
        if (options === void 0) {
          options = {};
        }
        _this = _Events.call(this) || this;
        _this._destroyed = false;
        _this._path = '';
        _this._keys = [];
        _this._data = {};
        _this._pathsWithDuplicates = null;
        if (options.pathsWithDuplicates) {
          _this._pathsWithDuplicates = {};
          for (var i = 0; i < options.pathsWithDuplicates.length; i++) {
            _this._pathsWithDuplicates[options.pathsWithDuplicates[i]] = true;
          }
        }
        _this.patch(data);
        _this._parent = options.parent || null;
        _this._parentPath = options.parentPath || '';
        _this._parentField = options.parentField || null;
        _this._parentKey = options.parentKey || null;
        _this._latestFn = options.latestFn || null;
        _this._silent = false;
        var propagate = function propagate(evt) {
          return function (path, arg1, arg2, arg3) {
            if (!this._parent) return;
            var key = this._parentKey;
            if (!key && this._parentField instanceof Array) {
              key = this._parentField.indexOf(this);
              if (key === -1) return;
            }
            path = this._parentPath + '.' + key + '.' + path;
            var state;
            if (this._silent) state = this._parent.silence();
            this._parent.emit(path + ':' + evt, arg1, arg2, arg3);
            this._parent.emit('*:' + evt, path, arg1, arg2, arg3);
            if (this._silent) this._parent.silenceRestore(state);
          };
        };
        _this.on('*:set', propagate('set'));
        _this.on('*:unset', propagate('unset'));
        _this.on('*:insert', propagate('insert'));
        _this.on('*:remove', propagate('remove'));
        _this.on('*:move', propagate('move'));
        return _this;
      }
      _inheritsLoose(Observer, _Events);
      Observer._splitPath = function _splitPath(path) {
        var cache = Observer._splitPathsCache;
        var result = cache[path];
        if (!result) {
          result = path.split('.');
          cache[path] = result;
        } else {
          result = result.slice();
        }
        return result;
      };
      var _proto = Observer.prototype;
      _proto.silence = function silence() {
        this._silent = true;
        var historyState = this.history && this.history.enabled;
        if (historyState) this.history.enabled = false;
        var syncState = this.sync && this.sync.enabled;
        if (syncState) this.sync.enabled = false;
        return [historyState, syncState];
      };
      _proto.silenceRestore = function silenceRestore(state) {
        this._silent = false;
        if (state[0]) this.history.enabled = true;
        if (state[1]) this.sync.enabled = true;
      };
      _proto._prepare = function _prepare(target, key, value, silent, remote) {
        var i;
        var state;
        var path = (target._path ? target._path + '.' : '') + key;
        var type = typeof value;
        target._keys.push(key);
        if (type === 'object' && value instanceof Array) {
          target._data[key] = value.slice(0);
          for (i = 0; i < target._data[key].length; i++) {
            if (typeof target._data[key][i] === 'object' && target._data[key][i] !== null) {
              if (target._data[key][i] instanceof Array) {
                target._data[key][i].slice(0);
              } else {
                target._data[key][i] = new Observer(target._data[key][i], {
                  parent: this,
                  parentPath: path,
                  parentField: target._data[key],
                  parentKey: null
                });
              }
            } else {
              state = this.silence();
              this.emit(path + '.' + i + ':set', target._data[key][i], null, remote);
              this.emit('*:set', path + '.' + i, target._data[key][i], null, remote);
              this.silenceRestore(state);
            }
          }
          if (silent) state = this.silence();
          this.emit(path + ':set', target._data[key], null, remote);
          this.emit('*:set', path, target._data[key], null, remote);
          if (silent) this.silenceRestore(state);
        } else if (type === 'object' && value instanceof Object) {
          if (typeof target._data[key] !== 'object') {
            target._data[key] = {
              _path: path,
              _keys: [],
              _data: {}
            };
          }
          for (i in value) {
            if (typeof value[i] === 'object') {
              this._prepare(target._data[key], i, value[i], true, remote);
            } else {
              state = this.silence();
              target._data[key]._data[i] = value[i];
              target._data[key]._keys.push(i);
              this.emit(path + '.' + i + ':set', value[i], null, remote);
              this.emit('*:set', path + '.' + i, value[i], null, remote);
              this.silenceRestore(state);
            }
          }
          if (silent) state = this.silence();
          this.emit(path + ':set', value, undefined, remote);
          this.emit('*:set', path, value, undefined, remote);
          if (silent) this.silenceRestore(state);
        } else {
          if (silent) state = this.silence();
          target._data[key] = value;
          this.emit(path + ':set', value, undefined, remote);
          this.emit('*:set', path, value, undefined, remote);
          if (silent) this.silenceRestore(state);
        }
        return true;
      };
      _proto.set = function set(path, value, silent, remote, force) {
        var _this2 = this;
        var i;
        var valueOld;
        var keys = Observer._splitPath(path);
        var length = keys.length;
        var key = keys[length - 1];
        var node = this;
        var nodePath = '';
        var obj = this;
        var state;
        for (i = 0; i < length - 1; i++) {
          if (node instanceof Array) {
            node = node[keys[i]];
            if (node instanceof Observer) {
              path = keys.slice(i + 1).join('.');
              obj = node;
            }
          } else {
            if (i < length && typeof node._data[keys[i]] !== 'object') {
              if (node._data[keys[i]]) obj.unset((node.__path ? node.__path + '.' : '') + keys[i]);
              node._data[keys[i]] = {
                _path: path,
                _keys: [],
                _data: {}
              };
              node._keys.push(keys[i]);
            }
            if (i === length - 1 && node.__path) nodePath = node.__path + '.' + keys[i];
            node = node._data[keys[i]];
          }
        }
        if (node instanceof Array) {
          var ind = parseInt(key, 10);
          if (node[ind] === value && !force) return false;
          valueOld = node[ind];
          if (valueOld instanceof Observer) {
            valueOld = valueOld.json();
          } else {
            valueOld = obj.json(valueOld);
          }
          node[ind] = value;
          if (value instanceof Observer) {
            value._parent = obj;
            value._parentPath = nodePath;
            value._parentField = node;
            value._parentKey = null;
          }
          if (silent) state = obj.silence();
          obj.emit(path + ':set', value, valueOld, remote);
          obj.emit('*:set', path, value, valueOld, remote);
          if (silent) obj.silenceRestore(state);
          return true;
        } else if (node._data && !node._data.hasOwnProperty(key)) {
          if (typeof value === 'object') {
            return obj._prepare(node, key, value, false, remote);
          }
          node._data[key] = value;
          node._keys.push(key);
          if (silent) state = obj.silence();
          obj.emit(path + ':set', value, null, remote);
          obj.emit('*:set', path, value, null, remote);
          if (silent) obj.silenceRestore(state);
          return true;
        }
        if (typeof value === 'object' && value instanceof Array) {
          if (arrayEquals(value, node._data[key]) && !force) return false;
          valueOld = node._data[key];
          if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);
          if (node._data[key] && node._data[key].length === value.length) {
            state = obj.silence();
            if (value.length === 0) {
              node._data[key] = value;
            }
            for (i = 0; i < node._data[key].length; i++) {
              if (node._data[key][i] instanceof Observer) {
                node._data[key][i].patch(value[i], true);
              } else if (node._data[key][i] !== value[i]) {
                node._data[key][i] = value[i];
                obj.emit(path + '.' + i + ':set', node._data[key][i], valueOld && valueOld[i] || null, remote);
                obj.emit('*:set', path + '.' + i, node._data[key][i], valueOld && valueOld[i] || null, remote);
              }
            }
            obj.silenceRestore(state);
          } else {
            node._data[key] = [];
            value.forEach(function (val) {
              _this2._doInsert(node, key, val, undefined, true);
            });
            state = obj.silence();
            for (i = 0; i < node._data[key].length; i++) {
              obj.emit(path + '.' + i + ':set', node._data[key][i], valueOld && valueOld[i] || null, remote);
              obj.emit('*:set', path + '.' + i, node._data[key][i], valueOld && valueOld[i] || null, remote);
            }
            obj.silenceRestore(state);
          }
          if (silent) state = obj.silence();
          obj.emit(path + ':set', value, valueOld, remote);
          obj.emit('*:set', path, value, valueOld, remote);
          if (silent) obj.silenceRestore(state);
          return true;
        } else if (typeof value === 'object' && value instanceof Object) {
          var changed = false;
          valueOld = node._data[key];
          if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);
          keys = Object.keys(value);
          if (!node._data[key] || !node._data[key]._data) {
            if (node._data[key]) {
              obj.unset((node.__path ? node.__path + '.' : '') + key);
            } else {
              changed = true;
            }
            node._data[key] = {
              _path: path,
              _keys: [],
              _data: {}
            };
          }
          var c;
          for (var n in node._data[key]._data) {
            if (!value.hasOwnProperty(n)) {
              c = obj.unset(path + '.' + n, true);
              if (c) changed = true;
            } else if (node._data[key]._data.hasOwnProperty(n)) {
              if (!obj._equals(node._data[key]._data[n], value[n])) {
                c = obj.set(path + '.' + n, value[n], true);
                if (c) changed = true;
              }
            } else {
              c = obj._prepare(node._data[key], n, value[n], true, remote);
              if (c) changed = true;
            }
          }
          for (i = 0; i < keys.length; i++) {
            if (value[keys[i]] === undefined && node._data[key]._data.hasOwnProperty(keys[i])) {
              c = obj.unset(path + '.' + keys[i], true);
              if (c) changed = true;
            } else if (typeof value[keys[i]] === 'object') {
              if (node._data[key]._data.hasOwnProperty(keys[i])) {
                c = obj.set(path + '.' + keys[i], value[keys[i]], true);
                if (c) changed = true;
              } else {
                c = obj._prepare(node._data[key], keys[i], value[keys[i]], true, remote);
                if (c) changed = true;
              }
            } else if (!obj._equals(node._data[key]._data[keys[i]], value[keys[i]])) {
              if (typeof value[keys[i]] === 'object') {
                c = obj.set(node._data[key]._path + '.' + keys[i], value[keys[i]], true);
                if (c) changed = true;
              } else if (node._data[key]._data[keys[i]] !== value[keys[i]]) {
                changed = true;
                if (node._data[key]._keys.indexOf(keys[i]) === -1) node._data[key]._keys.push(keys[i]);
                node._data[key]._data[keys[i]] = value[keys[i]];
                state = obj.silence();
                obj.emit(node._data[key]._path + '.' + keys[i] + ':set', node._data[key]._data[keys[i]], null, remote);
                obj.emit('*:set', node._data[key]._path + '.' + keys[i], node._data[key]._data[keys[i]], null, remote);
                obj.silenceRestore(state);
              }
            }
          }
          if (changed) {
            if (silent) state = obj.silence();
            var val = obj.json(node._data[key]);
            obj.emit(node._data[key]._path + ':set', val, valueOld, remote);
            obj.emit('*:set', node._data[key]._path, val, valueOld, remote);
            if (silent) obj.silenceRestore(state);
            return true;
          }
          return false;
        }
        var data;
        if (!node.hasOwnProperty('_data') && node.hasOwnProperty(key)) {
          data = node;
        } else {
          data = node._data;
        }
        if (data[key] === value && !force) return false;
        if (silent) state = obj.silence();
        valueOld = data[key];
        if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);
        data[key] = value;
        obj.emit(path + ':set', value, valueOld, remote);
        obj.emit('*:set', path, value, valueOld, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      };
      _proto.has = function has(path) {
        var keys = Observer._splitPath(path);
        var node = this;
        for (var i = 0, len = keys.length; i < len; i++) {
          if (node == undefined) return undefined;
          if (node._data) {
            node = node._data[keys[i]];
          } else {
            node = node[keys[i]];
          }
        }
        return node !== undefined;
      };
      _proto.get = function get(path, raw) {
        var keys = Observer._splitPath(path);
        var node = this;
        for (var i = 0; i < keys.length; i++) {
          if (node == undefined) return undefined;
          if (node._data) {
            node = node._data[keys[i]];
          } else {
            node = node[keys[i]];
          }
        }
        if (raw) return node;
        if (node == null) {
          return null;
        }
        return this.json(node);
      };
      _proto.getRaw = function getRaw(path) {
        return this.get(path, true);
      };
      _proto._equals = function _equals(a, b) {
        if (a === b) {
          return true;
        } else if (a instanceof Array && b instanceof Array && arrayEquals(a, b)) {
          return true;
        }
        return false;
      };
      _proto.unset = function unset(path, silent, remote) {
        var i;
        var keys = Observer._splitPath(path);
        var key = keys[keys.length - 1];
        var node = this;
        var obj = this;
        for (i = 0; i < keys.length - 1; i++) {
          if (node instanceof Array) {
            node = node[keys[i]];
            if (node instanceof Observer) {
              path = keys.slice(i + 1).join('.');
              obj = node;
            }
          } else {
            node = node._data[keys[i]];
          }
        }
        if (!node._data || !node._data.hasOwnProperty(key)) return false;
        var valueOld = node._data[key];
        if (!(valueOld instanceof Observer)) valueOld = obj.json(valueOld);
        if (node._data[key] && node._data[key]._data) {
          for (i = node._data[key]._keys.length - 1; i >= 0; i--) {
            obj.unset(path + '.' + node._data[key]._keys[i], true);
          }
        }
        node._keys.splice(node._keys.indexOf(key), 1);
        delete node._data[key];
        var state;
        if (silent) state = obj.silence();
        obj.emit(path + ':unset', valueOld, remote);
        obj.emit('*:unset', path, valueOld, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      };
      _proto.remove = function remove(path, ind, silent, remote) {
        var keys = Observer._splitPath(path);
        var key = keys[keys.length - 1];
        var node = this;
        var obj = this;
        for (var i = 0; i < keys.length - 1; i++) {
          if (node instanceof Array) {
            node = node[parseInt(keys[i], 10)];
            if (node instanceof Observer) {
              path = keys.slice(i + 1).join('.');
              obj = node;
            }
          } else if (node._data && node._data.hasOwnProperty(keys[i])) {
            node = node._data[keys[i]];
          } else {
            return false;
          }
        }
        if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return false;
        var arr = node._data[key];
        if (arr.length < ind) return false;
        var value = arr[ind];
        if (value instanceof Observer) {
          value._parent = null;
        } else {
          value = obj.json(value);
        }
        arr.splice(ind, 1);
        var state;
        if (silent) state = obj.silence();
        obj.emit(path + ':remove', value, ind, remote);
        obj.emit('*:remove', path, value, ind, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      };
      _proto.removeValue = function removeValue(path, value, silent, remote) {
        var keys = Observer._splitPath(path);
        var key = keys[keys.length - 1];
        var node = this;
        var obj = this;
        for (var i = 0; i < keys.length - 1; i++) {
          if (node instanceof Array) {
            node = node[parseInt(keys[i], 10)];
            if (node instanceof Observer) {
              path = keys.slice(i + 1).join('.');
              obj = node;
            }
          } else if (node._data && node._data.hasOwnProperty(keys[i])) {
            node = node._data[keys[i]];
          } else {
            return;
          }
        }
        if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
        var arr = node._data[key];
        var ind = arr.indexOf(value);
        if (ind === -1) {
          return;
        }
        if (arr.length < ind) return;
        value = arr[ind];
        if (value instanceof Observer) {
          value._parent = null;
        } else {
          value = obj.json(value);
        }
        arr.splice(ind, 1);
        var state;
        if (silent) state = obj.silence();
        obj.emit(path + ':remove', value, ind, remote);
        obj.emit('*:remove', path, value, ind, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      };
      _proto.insert = function insert(path, value, ind, silent, remote) {
        var keys = Observer._splitPath(path);
        var key = keys[keys.length - 1];
        var node = this;
        var obj = this;
        for (var i = 0; i < keys.length - 1; i++) {
          if (node instanceof Array) {
            node = node[parseInt(keys[i], 10)];
            if (node instanceof Observer) {
              path = keys.slice(i + 1).join('.');
              obj = node;
            }
          } else if (node._data && node._data.hasOwnProperty(keys[i])) {
            node = node._data[keys[i]];
          } else {
            return;
          }
        }
        if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
        var arr = node._data[key];
        value = obj._doInsert(node, key, value, ind);
        if (ind === undefined) {
          ind = arr.length - 1;
        }
        var state;
        if (silent) state = obj.silence();
        obj.emit(path + ':insert', value, ind, remote);
        obj.emit('*:insert', path, value, ind, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      };
      _proto._doInsert = function _doInsert(node, key, value, ind, allowDuplicates) {
        var arr = node._data[key];
        if (typeof value === 'object' && !(value instanceof Observer) && value !== null) {
          if (value instanceof Array) {
            value = value.slice(0);
          } else {
            value = new Observer(value);
          }
        }
        var path = node._path ? node._path + "." + key : key;
        if (value !== null && !allowDuplicates && (!this._pathsWithDuplicates || !this._pathsWithDuplicates[path])) {
          if (arr.indexOf(value) !== -1) {
            return;
          }
        }
        if (ind === undefined) {
          arr.push(value);
        } else {
          arr.splice(ind, 0, value);
        }
        if (value instanceof Observer) {
          value._parent = this;
          value._parentPath = path;
          value._parentField = arr;
          value._parentKey = null;
        } else {
          value = this.json(value);
        }
        return value;
      };
      _proto.move = function move(path, indOld, indNew, silent, remote) {
        var keys = Observer._splitPath(path);
        var key = keys[keys.length - 1];
        var node = this;
        var obj = this;
        for (var i = 0; i < keys.length - 1; i++) {
          if (node instanceof Array) {
            node = node[parseInt(keys[i], 10)];
            if (node instanceof Observer) {
              path = keys.slice(i + 1).join('.');
              obj = node;
            }
          } else if (node._data && node._data.hasOwnProperty(keys[i])) {
            node = node._data[keys[i]];
          } else {
            return;
          }
        }
        if (!node._data || !node._data.hasOwnProperty(key) || !(node._data[key] instanceof Array)) return;
        var arr = node._data[key];
        if (arr.length < indOld || arr.length < indNew || indOld === indNew) return;
        var value = arr[indOld];
        arr.splice(indOld, 1);
        if (indNew === -1) indNew = arr.length;
        arr.splice(indNew, 0, value);
        if (!(value instanceof Observer)) value = obj.json(value);
        var state;
        if (silent) state = obj.silence();
        obj.emit(path + ':move', value, indNew, indOld, remote);
        obj.emit('*:move', path, value, indNew, indOld, remote);
        if (silent) obj.silenceRestore(state);
        return true;
      };
      _proto.patch = function patch(data, removeMissingKeys) {
        if (typeof data !== 'object') return;
        for (var key in data) {
          if (typeof data[key] === 'object' && !this._data.hasOwnProperty(key)) {
            this._prepare(this, key, data[key]);
          } else if (this._data[key] !== data[key]) {
            this.set(key, data[key]);
          }
        }
        if (removeMissingKeys) {
          for (var _key in this._data) {
            if (!data.hasOwnProperty(_key)) {
              this.unset(_key);
            }
          }
        }
      };
      _proto.json = function json(target) {
        var key, n;
        var obj = {};
        var node = target === undefined ? this : target;
        var len, nlen;
        if (node instanceof Object && node._keys) {
          len = node._keys.length;
          for (var i = 0; i < len; i++) {
            key = node._keys[i];
            var value = node._data[key];
            var type = typeof value;
            if (type === 'object' && value instanceof Array) {
              obj[key] = value.slice(0);
              nlen = obj[key].length;
              for (n = 0; n < nlen; n++) {
                if (typeof obj[key][n] === 'object') obj[key][n] = this.json(obj[key][n]);
              }
            } else if (type === 'object' && value instanceof Object) {
              obj[key] = this.json(value);
            } else {
              obj[key] = value;
            }
          }
        } else {
          if (node === null) {
            return null;
          } else if (typeof node === 'object' && node instanceof Array) {
            obj = node.slice(0);
            len = obj.length;
            for (n = 0; n < len; n++) {
              obj[n] = this.json(obj[n]);
            }
          } else if (typeof node === 'object') {
            for (key in node) {
              if (node.hasOwnProperty(key)) obj[key] = node[key];
            }
          } else {
            obj = node;
          }
        }
        return obj;
      };
      _proto.forEach = function forEach(fn, target, path) {
        if (path === void 0) {
          path = '';
        }
        var node = target || this;
        for (var i = 0; i < node._keys.length; i++) {
          var key = node._keys[i];
          var value = node._data[key];
          var type = this.schema && this.schema.has(path + key) && this.schema.get(path + key).type.name.toLowerCase() || typeof value;
          if (type === 'object' && value instanceof Array) {
            fn(path + key, 'array', value, key);
          } else if (type === 'object' && value instanceof Object) {
            fn(path + key, 'object', value, key);
            this.forEach(fn, value, path + key + '.');
          } else {
            fn(path + key, type, value, key);
          }
        }
      };
      _proto.latest = function latest() {
        return this._latestFn ? this._latestFn() : this;
      };
      _proto.destroy = function destroy() {
        if (this._destroyed) return;
        this._destroyed = true;
        this.emit('destroy');
        this.unbind();
      };
      return _createClass(Observer, [{
        key: "latestFn",
        get: function get() {
          return this._latestFn;
        },
        set: function set(value) {
          this._latestFn = value;
        }
      }]);
    }(Events);
    Observer._splitPathsCache = {};

    var ObserverHistory = function (_Events) {
      function ObserverHistory(args) {
        var _this;
        if (args === void 0) {
          args = {};
        }
        _this = _Events.call(this) || this;
        _this.item = args.item;
        _this._history = args.history;
        _this._enabled = args.enabled || true;
        _this._prefix = args.prefix || '';
        _this._combine = args.combine || false;
        _this._events = [];
        _this._initialize();
        return _this;
      }
      _inheritsLoose(ObserverHistory, _Events);
      var _proto = ObserverHistory.prototype;
      _proto._initialize = function _initialize() {
        var _this2 = this;
        this._events.push(this.item.on('*:set', function (path, value, valueOld) {
          if (!_this2._enabled || !_this2._history) return;
          if (value instanceof Observer) value = value.json();
          var action = {
            name: _this2._prefix + path,
            combine: _this2._combine,
            undo: function undo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              if (valueOld === undefined) {
                item.unset(path);
              } else {
                item.set(path, valueOld);
              }
              item.history.enabled = true;
            },
            redo: function redo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              if (value === undefined) {
                item.unset(path);
              } else {
                item.set(path, value);
              }
              item.history.enabled = true;
            }
          };
          _this2._history.add(action);
        }));
        this._events.push(this.item.on('*:unset', function (path, valueOld) {
          if (!_this2._enabled || !_this2._history) return;
          var action = {
            name: _this2._prefix + path,
            combine: _this2._combine,
            undo: function undo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.set(path, valueOld);
              item.history.enabled = true;
            },
            redo: function redo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.unset(path);
              item.history.enabled = true;
            }
          };
          _this2._history.add(action);
        }));
        this._events.push(this.item.on('*:insert', function (path, value, ind) {
          if (!_this2._enabled || !_this2._history) return;
          var action = {
            name: _this2._prefix + path,
            combine: _this2._combine,
            undo: function undo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.removeValue(path, value);
              item.history.enabled = true;
            },
            redo: function redo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.insert(path, value, ind);
              item.history.enabled = true;
            }
          };
          _this2._history.add(action);
        }));
        this._events.push(this.item.on('*:remove', function (path, value, ind) {
          if (!_this2._enabled || !_this2._history) return;
          var action = {
            name: _this2._prefix + path,
            combine: _this2._combine,
            undo: function undo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.insert(path, value, ind);
              item.history.enabled = true;
            },
            redo: function redo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.removeValue(path, value);
              item.history.enabled = true;
            }
          };
          _this2._history.add(action);
        }));
        this._events.push(this.item.on('*:move', function (path, value, ind, indOld) {
          if (!_this2._enabled || !_this2._history) return;
          var action = {
            name: _this2._prefix + path,
            combine: _this2._combine,
            undo: function undo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.move(path, ind, indOld);
              item.history.enabled = true;
            },
            redo: function redo() {
              var item = _this2.item.latest();
              if (!item) return;
              item.history.enabled = false;
              item.move(path, indOld, ind);
              item.history.enabled = true;
            }
          };
          _this2._history.add(action);
        }));
      };
      _proto.destroy = function destroy() {
        this._events.forEach(function (evt) {
          evt.unbind();
        });
        this._events.length = 0;
        this.item = null;
      };
      return _createClass(ObserverHistory, [{
        key: "enabled",
        get: function get() {
          return this._enabled;
        },
        set: function set(value) {
          this._enabled = !!value;
        }
      }, {
        key: "prefix",
        get: function get() {
          return this._prefix;
        },
        set: function set(value) {
          this._prefix = value || '';
        }
      }, {
        key: "combine",
        get: function get() {
          return this._combine;
        },
        set: function set(value) {
          this._combine = !!value;
        }
      }]);
    }(Events);

    var ObserverList = function (_Events) {
      function ObserverList(options) {
        var _this;
        if (options === void 0) {
          options = {};
        }
        _this = _Events.call(this) || this;
        _this.data = [];
        _this._indexed = {};
        _this.sorted = options.sorted || null;
        _this.index = options.index || null;
        return _this;
      }
      _inheritsLoose(ObserverList, _Events);
      var _proto = ObserverList.prototype;
      _proto.get = function get(index) {
        if (this.index) {
          return this._indexed[index] || null;
        }
        return this.data[index] || null;
      };
      _proto.set = function set(index, value) {
        if (this.index) {
          this._indexed[index] = value;
        } else {
          this.data[index] = value;
        }
      };
      _proto.indexOf = function indexOf(item) {
        if (this.index) {
          var index = item instanceof Observer && item.get(this.index) || item[this.index];
          return this._indexed[index] && index || null;
        }
        var ind = this.data.indexOf(item);
        return ind !== -1 ? ind : null;
      };
      _proto.position = function position(b, fn) {
        var l = this.data;
        var min = 0;
        var max = l.length - 1;
        var cur;
        var a, i;
        fn = fn || this.sorted;
        while (min <= max) {
          cur = Math.floor((min + max) / 2);
          a = l[cur];
          i = fn(a, b);
          if (i === 1) {
            max = cur - 1;
          } else if (i === -1) {
            min = cur + 1;
          } else {
            return cur;
          }
        }
        return -1;
      };
      _proto.positionNextClosest = function positionNextClosest(b, fn) {
        var l = this.data;
        var min = 0;
        var max = l.length - 1;
        var cur;
        var a, i;
        fn = fn || this.sorted;
        if (l.length === 0) return -1;
        if (fn(l[0], b) === 0) return 0;
        while (min <= max) {
          cur = Math.floor((min + max) / 2);
          a = l[cur];
          i = fn(a, b);
          if (i === 1) {
            max = cur - 1;
          } else if (i === -1) {
            min = cur + 1;
          } else {
            return cur;
          }
        }
        if (fn(a, b) === 1) return cur;
        if (cur + 1 === l.length) return -1;
        return cur + 1;
      };
      _proto.has = function has(item) {
        if (this.index) {
          var index = item instanceof Observer && item.get(this.index) || item[this.index];
          return !!this._indexed[index];
        }
        return this.data.indexOf(item) !== -1;
      };
      _proto.add = function add(item) {
        if (this.has(item)) return null;
        var index = this.data.length;
        if (this.index) {
          index = item instanceof Observer && item.get(this.index) || item[this.index];
          this._indexed[index] = item;
        }
        var pos = 0;
        if (this.sorted) {
          pos = this.positionNextClosest(item);
          if (pos !== -1) {
            this.data.splice(pos, 0, item);
          } else {
            this.data.push(item);
          }
        } else {
          this.data.push(item);
          pos = this.data.length - 1;
        }
        this.emit('add', item, index, pos);
        if (this.index) {
          var id = item.get(this.index);
          if (id) {
            this.emit("add[" + id + "]", item, index, pos);
          }
        }
        return pos;
      };
      _proto.move = function move(item, pos) {
        var ind = this.data.indexOf(item);
        this.data.splice(ind, 1);
        if (pos === -1) {
          this.data.push(item);
        } else {
          this.data.splice(pos, 0, item);
        }
        this.emit('move', item, pos);
      };
      _proto.remove = function remove(item) {
        if (!this.has(item)) return;
        var ind = this.data.indexOf(item);
        var index = ind;
        if (this.index) {
          index = item instanceof Observer && item.get(this.index) || item[this.index];
          delete this._indexed[index];
        }
        this.data.splice(ind, 1);
        this.emit('remove', item, index);
      };
      _proto.removeByKey = function removeByKey(index) {
        var item;
        if (this.index) {
          item = this._indexed[index];
          if (!item) return;
          var ind = this.data.indexOf(item);
          this.data.splice(ind, 1);
          delete this._indexed[index];
          this.emit('remove', item, ind);
        } else {
          if (this.data.length < index) return;
          item = this.data[index];
          this.data.splice(index, 1);
          this.emit('remove', item, index);
        }
      };
      _proto.removeBy = function removeBy(fn) {
        var i = this.data.length;
        while (i--) {
          if (!fn(this.data[i])) continue;
          if (this.index) {
            delete this._indexed[this.data[i][this.index]];
          }
          this.data.splice(i, 1);
          this.emit('remove', this.data[i], i);
        }
      };
      _proto.clear = function clear() {
        var items = this.data.slice(0);
        this.data = [];
        this._indexed = {};
        var i = items.length;
        while (i--) {
          this.emit('remove', items[i], i);
        }
      };
      _proto.forEach = function forEach(fn) {
        for (var i = 0; i < this.data.length; i++) {
          fn(this.data[i], this.index && this.data[i][this.index] || i);
        }
      };
      _proto.find = function find(fn) {
        var items = [];
        for (var i = 0; i < this.data.length; i++) {
          if (!fn(this.data[i])) continue;
          var index = i;
          if (this.index) index = this.data[i][this.index];
          items.push([index, this.data[i]]);
        }
        return items;
      };
      _proto.findOne = function findOne(fn) {
        for (var i = 0; i < this.data.length; i++) {
          if (!fn(this.data[i])) continue;
          var index = i;
          if (this.index) index = this.data[i][this.index];
          return [index, this.data[i]];
        }
        return null;
      };
      _proto.map = function map(fn) {
        return this.data.map(fn);
      };
      _proto.sort = function sort(fn) {
        this.data.sort(fn);
      };
      _proto.array = function array() {
        return this.data.slice(0);
      };
      _proto.json = function json() {
        var items = this.array();
        for (var i = 0; i < items.length; i++) {
          if (items[i] instanceof Observer) {
            items[i] = items[i].json();
          }
        }
        return items;
      };
      return _createClass(ObserverList, [{
        key: "length",
        get: function get() {
          return this.data.length;
        }
      }]);
    }(Events);

    exports.EventHandle = EventHandle;
    exports.Events = Events;
    exports.History = History;
    exports.Observer = Observer;
    exports.ObserverHistory = ObserverHistory;
    exports.ObserverList = ObserverList;

}));
