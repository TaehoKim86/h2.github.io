/**
 * The Observer class is used to observe and manage changes to an object. It allows for tracking
 * modifications to nested properties, emitting events on changes, and maintaining state
 * consistency. This is particularly useful in applications where state management and change
 * tracking are critical, such as in data-driven interfaces or collaborative applications.
 *
 * @example
 * const data = {
 *   name: 'John',
 *   age: 30,
 *   address: {
 *     city: 'New York',
 *     zip: '10001'
 *   }
 * };
 *
 * const observer = new Observer(data);
 *
 * observer.on('name:set', (newValue, oldValue) => {
 *   console.log(`Name changed from ${oldValue} to ${newValue}`);
 * });
 *
 * observer.set('name', 'Jane'); // Logs: Name changed from John to Jane
 */
export class Observer extends Events {
    static _splitPathsCache: {};
    static _splitPath(path: any): any;
    /**
     * Creates a new Observer instance.
     *
     * @param {object} [data] - The initial data to observe.
     * @param {object} [options] - Additional options for the observer.
     */
    constructor(data?: object, options?: object);
    _destroyed: boolean;
    _path: string;
    _keys: any[];
    _data: {};
    _pathsWithDuplicates: {};
    _parent: any;
    _parentPath: any;
    _parentField: any;
    _parentKey: any;
    _latestFn: any;
    _silent: boolean;
    silence(): any[];
    silenceRestore(state: any): void;
    _prepare(target: any, key: any, value: any, silent: any, remote: any): boolean;
    /**
     * @param {string} path - Path to the property in the object.
     * @param {*} value - Value to set.
     * @param {boolean} [silent] - If true, the change will not be recorded in history.
     * @param {boolean} [remote] - TODO.
     * @param {boolean} [force] - If true, the value will be set even if it is the same as the current value.
     * @returns {boolean} Returns true if the value was successfully set and false otherwise.
     */
    set(path: string, value: any, silent?: boolean, remote?: boolean, force?: boolean): boolean;
    /**
     * Query whether the object has the specified property.
     *
     * @param {string} path - Path to the value.
     * @returns {boolean} Returns true if the value is present and false otherwise.
     */
    has(path: string): boolean;
    /**
     * @param {string} path - Path to the value.
     * @param {boolean} [raw] - TODO.
     * @returns {*} The value at the specified path.
     */
    get(path: string, raw?: boolean): any;
    getRaw(path: any): any;
    _equals(a: any, b: any): boolean;
    /**
     * @param {string} path - Path to the value.
     * @param {boolean} [silent] - If true, the change will not be recorded in history.
     * @param {boolean} [remote] - TODO.
     * @returns {boolean} Returns true if the value was successfully unset and false otherwise.
     */
    unset(path: string, silent?: boolean, remote?: boolean): boolean;
    /**
     * @param {string} path - Path to the value.
     * @param {number} ind - Index of the value.
     * @param {boolean} [silent] - If true, the remove event will not be emitted.
     * @param {boolean} [remote] - TODO.
     * @returns {boolean} Returns true if the value was successfully removed and false otherwise.
     */
    remove(path: string, ind: number, silent?: boolean, remote?: boolean): boolean;
    removeValue(path: any, value: any, silent: any, remote: any): boolean;
    insert(path: any, value: any, ind: any, silent: any, remote: any): boolean;
    _doInsert(node: any, key: any, value: any, ind: any, allowDuplicates: any): any;
    move(path: any, indOld: any, indNew: any, silent: any, remote: any): boolean;
    patch(data: any, removeMissingKeys: any): void;
    /**
     * @param {*} [target] - TODO.
     * @returns {object} The current state of the object tracked by the observer.
     */
    json(target?: any): object;
    forEach(fn: any, target: any, path?: string): void;
    /**
     * Returns the latest observer instance. This is important when
     * dealing with undo / redo where the observer might have been deleted
     * and/or possibly re-created.
     *
     * @returns {Observer} The latest instance of the observer.
     */
    latest(): Observer;
    /**
     * Destroys the observer instance.
     */
    destroy(): void;
    set latestFn(value: any);
    get latestFn(): any;
}
import { Events } from './events.js';
