/**
 * EventHandle manages the binding and unbinding of event listeners. It provides a convenient way
 * to add, remove, and invoke event handlers associated with specific event names. Each EventHandle
 * is linked to an 'owner' object, typically an instance of the Events class, allowing for elegant
 * event management and chaining.
 */
export class EventHandle {
    /**
     * Creates an instance of EventHandle.
     *
     * @param {import('./events.js').Events} owner - Owner
     * @param {string} name - Name
     * @param {import('./events.js').HandleEvent} fn - Callback function
     */
    constructor(owner: import('./events.js').Events, name: string, fn: import('./events.js').HandleEvent);
    /**
     * @type {import('./events.js').Events}
     * @private
     */
    private owner;
    /**
     * @type {string}
     * @private
     */
    private name;
    /**
     * @type {import('./events.js').HandleEvent}
     * @private
     */
    private fn;
    /**
     * Unbinds the event handle from the owner, effectively removing the event listener. After
     * calling this method, the event handle will no longer trigger the callback function when the
     * event is emitted.
     */
    unbind(): void;
    /**
     * Invokes the callback function associated with the event handle. This method directly
     * triggers the event's callback without the event being emitted by the event system.
     */
    call(...args: any[]): void;
    /**
     * Registers a new event listener on the same owner as the EventHandle. This method allows
     * chaining additional event listeners to the owner of this event handle.
     *
     * @param {string} name - Name
     * @param {import('./events.js').HandleEvent} fn - Callback function
     * @returns {EventHandle} - EventHandle
     */
    on(name: string, fn: import('./events.js').HandleEvent): EventHandle;
}
