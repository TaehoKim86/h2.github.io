export type HistoryAction = {
    /**
     * - The action name.
     */
    name: string;
    /**
     * - The undo function.
     */
    undo: Function;
    /**
     * - The redo function.
     */
    redo: Function;
    /**
     * Whether to combine with the previous action with the same name. The
     * effect of combining is merely changing the redo function to be the redo function of this action.
     * The original undo function is not modified.
     */
    combine: boolean;
};
/**
 * @typedef {object} HistoryAction
 * @property {string} name - The action name.
 * @property {Function} undo - The undo function.
 * @property {Function} redo - The redo function.
 * @property {boolean} combine Whether to combine with the previous action with the same name. The
 * effect of combining is merely changing the redo function to be the redo function of this action.
 * The original undo function is not modified.
 */
/**
 * Manages history actions for undo/redo operations. This class keeps track of actions that can be
 * undone and redone, allowing for complex state management in applications such as editors, games,
 * or any interactive applications where state changes need to be reversible.
 *
 * @example
 * const history = new History();
 *
 * // Define an action
 * const action = {
 *   name: 'draw',
 *   undo: () => { console.log('Undo draw'); },
 *   redo: () => { console.log('Redo draw'); }
 * };
 *
 * // Add the action to history
 * history.add(action);
 *
 * // Perform undo
 * history.undo();
 *
 * // Perform redo
 * history.redo();
 */
export class History extends Events {
    /** @private */
    private _executing;
    /**
     * @type {HistoryAction[]}
     * @private
     */
    private _actions;
    /** @private */
    private _currentActionIndex;
    /** @private */
    private _canUndo;
    /** @private */
    private _canRedo;
    /**
     * Adds a new history action to the stack. If the action has a combine flag and matches the
     * current action's name, the redo function of the current action is updated. If actions have
     * been undone before adding this new action, it removes all actions that come after the
     * current action to maintain a consistent history.
     *
     * @param {HistoryAction} action - The action to add.
     * @returns {boolean} - Returns `true` if the action is successfully added, `false` otherwise.
     */
    add(action: HistoryAction): boolean;
    /**
     * Sets whether we can undo at this time.
     *
     * @type {boolean}
     */
    set canUndo(value: boolean);
    /**
     * Gets whether we can undo at this time.
     *
     * @type {boolean}
     */
    get canUndo(): boolean;
    /**
     * Sets whether we can redo at this time.
     *
     * @type {boolean}
     */
    set canRedo(value: boolean);
    /**
     * Gets whether we can redo at this time.
     *
     * @type {boolean}
     */
    get canRedo(): boolean;
    /**
     * Adds a new history action and immediately executes its redo function.
     *
     * @param {HistoryAction} action - The action.
     * @returns {Promise<void>} A promise that resolves once the redo function has been executed.
     */
    addAndExecute(action: HistoryAction): Promise<void>;
    /**
     * Undoes the last history action. This method retrieves the current action from the history
     * stack and executes the action's undo function.
     *
     * @returns {Promise<void>} A promise that resolves once the undo function has been executed.
     */
    undo(): Promise<void>;
    /**
     * Redoes the next history action. This retrieves the next action from the history stack and
     * executes the action's redo function.
     *
     * @returns {Promise<void>} A promise that resolves once the redo function has been executed.
     */
    redo(): Promise<void>;
    /**
     * Clears all history actions.
     */
    clear(): void;
    /**
     * The current history action.
     *
     * @type {HistoryAction}
     */
    get currentAction(): HistoryAction;
    /**
     * The last action committed to the history.
     *
     * @type {HistoryAction}
     */
    get lastAction(): HistoryAction;
    /**
     * Sets the number of async actions currently executing.
     *
     * @type {number}
     */
    set executing(value: number);
    /**
     * Gets the number of async actions currently executing.
     *
     * @type {number}
     */
    get executing(): number;
}
import { Events } from './events.js';
