import { Element } from '../Element/component.mjs';
import { LabelGroup as LabelGroup$1 } from './index.mjs';

/**
 * Represents a group of a Label and a Element. Useful for rows of labeled fields.
 */
class LabelGroup extends Element {
    constructor(props) {
        super(props);
        this.attachElement = (nodeElement, containerElement) => {
            if (!nodeElement)
                return;
            const childrenErrorMessage = 'A LabelGroup must contain a single PCUI react component as a child';
            // check that the LabelGroup has a single child
            if (Array.isArray(this.props.children) || !this.props.children) {
                throw new Error(childrenErrorMessage);
            }
            // casting child as a single ReactElement as we have confirmed it is above
            const child = this.props.children;
            const fieldProps = child.props;
            // check if the ReactElement contains an instance of an Element as its type, confirming it is a PCUI react component
            if (!(child.type.prototype instanceof Element)) {
                throw new Error(childrenErrorMessage);
            }
            // it's safe to cast the ReactElement type as a BaseComponent as we have confirmed it is an Element above
            const fieldClass = child.type.ctor;
            const labelField = new fieldClass(Object.assign({}, fieldProps));
            if (child.props.link) {
                labelField.link(fieldProps.link.observer, fieldProps.link.path);
            }
            this.element = new this.elementClass(Object.assign(Object.assign({}, this.props), { dom: nodeElement, container: containerElement, parent: undefined, field: labelField }));
        };
        this.elementClass = LabelGroup$1;
    }
    render() {
        return super.render();
    }
}
LabelGroup.ctor = LabelGroup$1;

export { LabelGroup };
//# sourceMappingURL=component.mjs.map
