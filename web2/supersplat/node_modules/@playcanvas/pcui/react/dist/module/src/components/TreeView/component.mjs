import * as React from 'react';
import { Element } from '../Element/component.mjs';
import { TreeViewItem as TreeViewItem$1 } from '../TreeViewItem/index.mjs';
import { TreeView as TreeView$1 } from './index.mjs';

/**
 * A container that can show a TreeView like a hierarchy. The TreeView contains
 * TreeViewItems.
 */
class TreeView extends Element {
    constructor(props) {
        super(props);
        this.element = new TreeView$1(Object.assign({}, props));
        this.loadChildren(this.props.children, this.element);
    }
    loadChildren(children, element) {
        if (!children)
            return;
        if (!Array.isArray(children)) {
            children = [children];
        }
        children.forEach((child) => {
            const childElement = new TreeViewItem$1({ text: child.props.text, icon: child.props.icon, open: false });
            if (child.props.onSelect) {
                childElement.on('select', child.props.onSelect);
            }
            if (child.props.onDeselect) {
                childElement.on('deselect', child.props.onDeselect);
            }
            element.append(childElement);
            this.loadChildren(child.props.children, childElement);
        });
    }
    componentDidUpdate() {
        this.parentElement.removeChild(this.element.dom);
        this.element = new TreeView$1(Object.assign({}, this.props));
        this.loadChildren(this.props.children, this.element);
        this.parentElement.appendChild(this.element.dom);
    }
    parentElementRendered(element) {
        if (!element)
            return;
        this.parentElement = element;
        this.parentElement.appendChild(this.element.dom);
    }
    render() {
        return React.createElement("div", { ref: this.parentElementRendered.bind(this) });
    }
}
TreeView.ctor = TreeView$1;

export { TreeView };
//# sourceMappingURL=component.mjs.map
