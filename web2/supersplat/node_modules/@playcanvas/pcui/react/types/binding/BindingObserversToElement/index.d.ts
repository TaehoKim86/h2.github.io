import { EventHandle, Observer } from '@playcanvas/observer';
import { IBindable } from '../../components';
import { BindingBase, BindingBaseArgs } from '../BindingBase';
export interface BindingObserversToElementArgs extends BindingBaseArgs {
    /**
     * Custom update function.
     */
    customUpdate?: (element: IBindable, observers: Observer[], paths: string[]) => void;
}
/**
 * Provides one way binding between Observers and an {@link IBindable} element and Observers. Any
 * changes from the observers will be propagated to the element.
 */
declare class BindingObserversToElement extends BindingBase {
    _customUpdate: (element: IBindable, observers: Observer[], paths: string[]) => void;
    _eventHandles: EventHandle[];
    _updateTimeout: number;
    /**
     * Creates a new BindingObserversToElement instance.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<BindingObserversToElementArgs>);
    private _linkObserver;
    private _deferUpdateElement;
    private _updateElement;
    link(observers: Observer | Observer[], paths: string | string[]): void;
    /**
     * Unlink the binding from its set of observers.
     */
    unlink(): void;
    /**
     * Clone the BindingObserversToElement instance.
     */
    clone(): BindingObserversToElement;
}
export { BindingObserversToElement };
