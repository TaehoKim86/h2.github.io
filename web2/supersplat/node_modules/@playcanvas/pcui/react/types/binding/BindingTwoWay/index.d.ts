import { Observer } from '@playcanvas/observer';
import { IBindable } from '../../components/Element';
import { BindingBase, BindingBaseArgs } from '../BindingBase';
import { BindingElementToObservers } from '../BindingElementToObservers';
import { BindingObserversToElement } from '../BindingObserversToElement';
export interface BindingTwoWayArgs extends BindingBaseArgs {
    /**
     * BindingElementToObservers instance.
     */
    bindingElementToObservers?: BindingElementToObservers;
    /**
     * BindingObserversToElement instance.
     */
    bindingObserversToElement?: BindingObserversToElement;
}
/**
 * Provides two way data binding between Observers and {@link IBindable} elements. This means that
 * when the value of the Observers changes the IBindable will be updated and vice versa.
 */
declare class BindingTwoWay extends BindingBase {
    _bindingElementToObservers: BindingElementToObservers;
    _bindingObserversToElement: BindingObserversToElement;
    /**
     * Creates a new BindingTwoWay instance.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<BindingTwoWayArgs>);
    link(observers: Observer | Observer[], paths: string | string[]): void;
    unlink(): void;
    clone(): BindingTwoWay;
    setValue(value: any): void;
    setValues(values: any[]): void;
    addValue(value: any): void;
    addValues(values: any[]): void;
    removeValue(value: any): void;
    removeValues(values: any[]): void;
    set element(value: IBindable | undefined);
    get element(): IBindable | undefined;
    set applyingChange(value: boolean);
    get applyingChange(): boolean;
    set historyCombine(value: boolean);
    get historyCombine(): boolean;
    set historyPrefix(value: string);
    get historyPrefix(): string;
    set historyPostfix(value: string);
    get historyPostfix(): string;
    set historyEnabled(value: any);
    get historyEnabled(): any;
}
export { BindingTwoWay };
