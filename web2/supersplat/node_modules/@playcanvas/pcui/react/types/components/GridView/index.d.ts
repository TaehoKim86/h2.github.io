import { Container, ContainerArgs } from '../Container';
import { GridViewItem } from '../GridViewItem';
/**
 * The arguments for the {@link GridView} constructor.
 */
interface GridViewArgs extends ContainerArgs {
    /**
     * If `true` the {@link GridView} layout will be vertical.
     */
    vertical?: boolean;
    /**
     * If `true`, the layout will allow for multiple options to be selected. Defaults to `true`.
     */
    multiSelect?: boolean;
    /**
     * If `true` and `multiSelect` is set to `false`, the layout will allow options to be deselected. Defaults to `true`.
     */
    allowDeselect?: boolean;
    /**
     * A filter function to filter {@link GridViewItem}s with signature `(GridViewItem) => boolean`.
     */
    filterFn?: (item: GridViewItem) => boolean;
}
/**
 * Represents a container that shows a flexible wrappable list of items that looks like a grid.
 * Contains {@link GridViewItem}s.
 */
declare class GridView extends Container {
    protected _vertical: boolean;
    protected _clickFn: (evt: MouseEvent, item: GridViewItem) => void;
    protected _filterFn: (item: GridViewItem) => boolean;
    protected _filterAnimationFrame: number;
    protected _filterCanceled: boolean;
    protected _multiSelect: boolean;
    protected _allowDeselect: boolean;
    protected _selected: GridViewItem[];
    /**
     * Creates a new GridView.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<GridViewArgs>);
    protected _onAppendGridViewItem(item: GridViewItem): void;
    protected _onRemoveGridViewItem(item: GridViewItem): void;
    protected _onClickItem(evt: MouseEvent, item: GridViewItem): void;
    protected _onSelectItem(item: GridViewItem): void;
    protected _onDeselectItem(item: GridViewItem): void;
    /**
     * Deselects all selected grid view items.
     */
    deselect(): void;
    /**
     * Filters grid view items with the filter function provided in the constructor.
     */
    filter(): void;
    /**
     * Filters grid view items asynchronously by only allowing up to the specified number of grid
     * view item operations. Fires the following events:
     *
     * - filter:start - When filtering starts.
     * - filter:end - When filtering ends.
     * - filter:delay - When an animation frame is requested to process another batch.
     * - filter:cancel - When filtering is canceled.
     *
     * @param batchLimit - The maximum number of items to show before requesting another animation frame.
     */
    filterAsync(batchLimit?: number): void;
    /**
     * Cancels asynchronous filtering.
     */
    filterAsyncCancel(): void;
    destroy(): void;
    /**
     * Gets the selected GridViewItems.
     */
    get selected(): GridViewItem[];
    /**
     * Gets whether the grid layout is vertical or not.
     */
    get vertical(): boolean;
}
export { GridView, GridViewArgs };
