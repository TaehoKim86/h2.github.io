import { Container, ContainerArgs } from '../Container';
import { Element } from '../Element';
import { Label } from '../Label';
/**
 * The arguments for the {@link TreeViewItem} constructor.
 */
interface TreeViewItemArgs extends ContainerArgs {
    /**
     * Whether the item is selected.
     */
    selected?: boolean;
    /**
     * Whether the item can be selected. Defaults to `true`.
     */
    allowSelect?: boolean;
    /**
     * Whether the item is open meaning showing its children.
     */
    open?: boolean;
    /**
     * Whether this {@link TreeViewItem} can be dragged. Only considered if the parent {@link TreeView}
     * has `allowDrag` set to `true`. Defaults to `true`.
     */
    allowDrag?: boolean;
    /**
     * Whether dropping is allowed on the {@link TreeViewItem}. Defaults to `true`.
     */
    allowDrop?: boolean;
    /**
     * The text shown by the {@link TreeViewItem}.
     */
    text?: string;
    /**
     * The icon shown before the text in the {@link TreeViewItem}. Defaults to 'E360'.
     */
    icon?: string;
    /**
     * Method to be called when the {@link TreeViewItem} is selected.
     */
    onSelect?: (deselect: () => void) => void;
    /**
     * Method to be called when the {@link TreeViewItem} is deselected.
     */
    onDeselect?: () => void;
}
/**
 * A TreeViewItem is a single node in a hierarchical {@link TreeView} control.
 */
declare class TreeViewItem extends Container {
    /**
     * Fired when user selects the TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * treeViewItem.on('select', (item: TreeViewItem) => {
     *     console.log('TreeViewItem selected', item);
     * });
     * ```
     */
    static readonly EVENT_SELECT = "select";
    /**
     * Fired when user deselects the TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * treeViewItem.on('deselect', (item: TreeViewItem) => {
     *     console.log('TreeViewItem deselected', item);
     * });
     * ```
     */
    static readonly EVENT_DESELECT = "deselect";
    /**
     * Fired when user opens the TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * treeViewItem.on('open', (item: TreeViewItem) => {
     *     console.log('TreeViewItem opened', item);
     * });
     * ```
     */
    static readonly EVENT_OPEN = "open";
    /**
     * Fired when user closes the TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * treeViewItem.on('close', (item: TreeViewItem) => {
     *     console.log('TreeViewItem closed', item);
     * });
     * ```
     */
    static readonly EVENT_CLOSE = "close";
    protected _containerContents: Container;
    protected _labelIcon: Label;
    protected _labelText: Label;
    protected _numChildren: number;
    protected _treeView: any;
    protected _allowDrag: boolean;
    protected _allowDrop: boolean;
    protected _allowSelect: boolean;
    protected _icon: string;
    /**
     * Creates a new TreeViewItem.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<TreeViewItemArgs>);
    destroy(): void;
    protected _onAppendChild(element: Element): void;
    protected _onRemoveChild(element: Element): void;
    protected _onContentKeyDown: (evt: KeyboardEvent) => void;
    protected _onContentMouseDown: (evt: MouseEvent) => void;
    protected _onContentMouseUp: (evt: MouseEvent) => void;
    protected _onContentMouseOver: (evt: MouseEvent) => void;
    protected _onContentDragStart: (evt: DragEvent) => void;
    protected _onContentClick: (evt: MouseEvent) => void;
    protected _dfs(fn: (item: TreeViewItem) => void): void;
    protected _onContentDblClick: (evt: MouseEvent) => void;
    protected _onContentContextMenu: (evt: MouseEvent) => void;
    protected _onContentFocus: (evt: FocusEvent) => void;
    protected _onContentBlur: (evt: FocusEvent) => void;
    rename(): void;
    focus(): void;
    blur(): void;
    /**
     * Sets whether the item is selected.
     */
    set selected(value: boolean);
    /**
     * Gets whether the item is selected.
     */
    get selected(): boolean;
    /**
     * Sets the text shown by the TreeViewItem.
     */
    set text(value: string);
    /**
     * Gets the text shown by the TreeViewItem.
     */
    get text(): string;
    /**
     * Gets the internal label that shows the text.
     */
    get textLabel(): Label;
    /**
     * Gets the internal label that shows the icon.
     */
    get iconLabel(): Label;
    /**
     * Sets whether the item is expanded and showing its children.
     */
    set open(value: boolean);
    /**
     * Gets whether the item is expanded and showing its children.
     */
    get open(): boolean;
    /**
     * Sets whether the ancestors of the item are open or closed.
     */
    set parentsOpen(value: boolean);
    /**
     * Gets whether the ancestors of the item are open or closed.
     */
    get parentsOpen(): boolean;
    /**
     * Sets whether dropping is allowed on the tree item.
     */
    set allowDrop(value: boolean);
    /**
     * Gets whether dropping is allowed on the tree item.
     */
    get allowDrop(): boolean;
    /**
     * Sets whether this tree item can be dragged. Only considered if the parent {@link TreeView}
     * has {@link TreeView#allowDrag} set to `true`.
     */
    set allowDrag(value: boolean);
    /**
     * Gets whether this tree item can be dragged.
     */
    get allowDrag(): boolean;
    /**
     * Sets whether the item can be selected.
     */
    set allowSelect(value: boolean);
    /**
     * Gets whether the item can be selected.
     */
    get allowSelect(): boolean;
    /**
     * Sets the parent {@link TreeView}.
     */
    set treeView(value: any);
    /**
     * Gets the parent {@link TreeView}.
     */
    get treeView(): any;
    /**
     * Gets the number of direct children.
     */
    get numChildren(): number;
    /**
     * Gets the first child item.
     */
    get firstChild(): TreeViewItem;
    /**
     * Gets the last child item.
     */
    get lastChild(): TreeViewItem;
    /**
     * Gets the first sibling item.
     */
    get nextSibling(): TreeViewItem;
    /**
     * Gets the last sibling item.
     */
    get previousSibling(): TreeViewItem;
    /**
     * Sets the icon shown before the text in the TreeViewItem.
     */
    set icon(value: string);
    /**
     * Gets the icon shown before the text in the TreeViewItem.
     */
    get icon(): string;
}
export { TreeViewItem, TreeViewItemArgs };
