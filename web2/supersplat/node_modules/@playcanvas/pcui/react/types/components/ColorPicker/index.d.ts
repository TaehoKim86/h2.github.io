import { EventHandle } from '@playcanvas/observer';
import { Element, ElementArgs, IBindable, IBindableArgs } from '../Element';
import { NumericInput } from '../NumericInput';
import { Overlay } from '../Overlay';
import { TextInput } from '../TextInput';
/**
 * The arguments for the {@link ColorPicker} constructor.
 */
interface ColorPickerArgs extends ElementArgs, IBindableArgs {
    /**
     * An array of 4 integers containing the RGBA values the picker should be initialized to. Defaults to `[0, 0, 255, 1]`.
     */
    value?: number[];
    /**
     * Number of color channels. Defaults to 3. Changing to 4 adds the option to change the alpha value.
     */
    channels?: number;
}
/**
 * Represents a color picker.
 */
declare class ColorPicker extends Element implements IBindable {
    protected _historyCombine: boolean;
    protected _historyPostfix: string;
    protected _value: number[];
    protected _channels: number;
    protected _size: number;
    protected _directInput: boolean;
    protected _colorHSV: number[];
    protected _pickerChannels: NumericInput[];
    protected _channelsNumber: number;
    protected _changing: boolean;
    protected _dragging: boolean;
    protected _callingCallback: boolean;
    protected _overlay: Overlay;
    protected _domColor: HTMLDivElement;
    protected _pickRect: HTMLDivElement;
    protected _pickRectPointerId: number;
    protected _pickRectWhite: HTMLDivElement;
    protected _pickRectBlack: HTMLDivElement;
    protected _pickRectHandle: HTMLDivElement;
    protected _pickHue: HTMLDivElement;
    protected _pickHuePointerId: number;
    protected _pickHueHandle: HTMLDivElement;
    protected _pickOpacity: HTMLDivElement;
    protected _pickOpacityPointerId: number;
    protected _pickOpacityHandle: HTMLDivElement;
    protected _panelFields: HTMLDivElement;
    protected _evtColorPick: EventHandle;
    protected _evtColorToPicker: EventHandle;
    protected _evtColorPickStart: EventHandle;
    protected _evtColorPickEnd: EventHandle;
    protected _fieldHex: TextInput;
    protected _renderChanges: boolean;
    /**
     * Creates a new ColorPicker.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<ColorPickerArgs>);
    destroy(): void;
    focus(): void;
    blur(): void;
    protected _onKeyDown: (evt: KeyboardEvent) => void;
    protected _onFocus: (evt: FocusEvent) => void;
    protected _onBlur: (evt: FocusEvent) => void;
    protected _setColorPickerPosition(x: number, y: number): void;
    protected _setPickerColor(color: number[]): void;
    protected _openColorPicker(): void;
    protected _callPicker(color: number[]): void;
    protected _valueToColor(value: number): number;
    protected _setValue(value: number[]): void;
    protected _updateValue(value: number[]): boolean;
    protected _getHex(): string;
    protected _pickRectPointerDown: (event: PointerEvent) => void;
    protected _pickRectPointerMove: (event: PointerEvent) => void;
    protected _pickRectPointerUp: (event: PointerEvent) => void;
    protected _pickHuePointerDown: (event: PointerEvent) => void;
    protected _pickHuePointerMove: (event: PointerEvent) => void;
    protected _pickHuePointerUp: (event: PointerEvent) => void;
    protected _pickOpacityPointerDown: (event: PointerEvent) => void;
    protected _pickOpacityPointerMove: (event: PointerEvent) => void;
    protected _pickOpacityPointerUp: (event: PointerEvent) => void;
    protected _onChangeHex(): void;
    protected _onChangeRgb(): void;
    protected _onChangeAlpha(value: number): void;
    /** @ignore */
    callbackHandle(): void;
    /** @ignore */
    callCallback(): void;
    set value(value: number[]);
    get value(): number[];
    set values(values: Array<number>);
    set channels(value: number);
    get channels(): number;
    set renderChanges(value: boolean);
    get renderChanges(): boolean;
}
export { ColorPicker, ColorPickerArgs };
