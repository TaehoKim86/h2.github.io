import { IBindableArgs, IPlaceholderArgs } from '../Element';
import { InputElement, InputElementArgs } from '../InputElement';
/**
 * The arguments for the {@link TextInput} constructor.
 */
interface TextInputArgs extends InputElementArgs, IBindableArgs, IPlaceholderArgs {
    /**
     * A function that validates the value that is entered into the input and returns `true` if it
     * is valid or `false` otherwise. If `false` then the input will be set in an error state and
     * the value will not propagate to the binding.
     */
    onValidate?: (value: string) => boolean;
}
/**
 * The TextInput is an input element of type text.
 */
declare class TextInput extends InputElement {
    protected _onValidate: (value: string) => boolean;
    /**
     * Creates a new TextInput.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<TextInputArgs>);
    protected _onInputChange(evt: Event): void;
    protected _updateValue(value: string | Array<string>): boolean;
    set value(value: string | Array<string>);
    get value(): string;
    set values(values: Array<string>);
    /**
     * Gets / sets the validate method for the input.
     */
    set onValidate(value: (value: string) => boolean);
    get onValidate(): (value: string) => boolean;
}
export { TextInput, TextInputArgs };
