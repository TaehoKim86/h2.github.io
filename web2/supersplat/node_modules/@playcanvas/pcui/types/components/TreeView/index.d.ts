import { Container, ContainerArgs } from '../Container';
import { Element } from '../Element';
import { TreeViewItem } from '../TreeViewItem';
/**
 * The arguments for the {@link TreeView} constructor.
 */
interface TreeViewArgs extends ContainerArgs {
    /**
     * Whether dragging a {@link TreeViewItem} is allowed. Defaults to `true`.
     */
    allowDrag?: boolean;
    /**
     * Whether reordering {@link TreeViewItem}s is allowed. Defaults to `true`.
     */
    allowReordering?: boolean;
    /**
     * Whether renaming {@link TreeViewItem}s is allowed by double clicking on them. Defaults to `false`.
     */
    allowRenaming?: boolean;
    /**
     * A filter that searches {@link TreeViewItem}s and only shows the ones that are relevant to the filter.
     */
    filter?: string;
    /**
     * A function to be called when we right click on a {@link TreeViewItem}.
     */
    onContextMenu?: (evt: MouseEvent, item: TreeViewItem) => void;
    /**
     * A function to be called when we try to reparent tree items. If a function is provided then the
     * tree items will not be reparented by the {@link TreeView} but instead will rely on the function to
     * reparent them as it sees fit.
     */
    onReparent?: any;
    /**
     * The element to scroll on drag. Defaults to this {@link TreeView}'s DOM element.
     */
    dragScrollElement?: HTMLElement;
}
/**
 * A container that can show a TreeView like a hierarchy. The TreeView contains
 * {@link TreeViewItem}s.
 */
declare class TreeView extends Container {
    /**
     * Fired when user starts dragging selected TreeViewItems.
     *
     * @event
     * @example
     * ```ts
     * const treeView = new TreeView({
     *     allowDrag: true // this is the default but we're showing it here for clarity
     * });
     * treeView.on('dragstart', (items) => {
     *     console.log(`Drag started of ${items.length} items');
     * });
     * ```
     */
    static readonly EVENT_DRAGSTART = "dragstart";
    /**
     * Fired when user stops dragging selected TreeViewItems.
     *
     * @event
     * @example
     * ```ts
     * const treeView = new TreeView({
     *     allowDrag: true // this is the default but we're showing it here for clarity
     * });
     * treeView.on('dragend', () => {
     *     console.log('Drag ended');
     * });
     * ```
     */
    static readonly EVENT_DRAGEND = "dragend";
    /**
     * Fired when user reparents TreeViewItems.
     *
     * @event
     * @example
     * ```ts
     * const treeView = new TreeView();
     * treeView.on('reparent', (reparented: { item: TreeViewItem; oldParent: Element; }[]) => {
     *     console.log(`Reparented ${reparented.length} items`);
     * });
     * ```
     */
    static readonly EVENT_REPARENT = "reparent";
    /**
     * Fired when user selects a TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * const treeView = new TreeView();
     * treeView.on('select', (item: TreeViewItem) => {
     *     console.log(`Selected item ${item.text}`);
     * });
     * ```
     */
    static readonly EVENT_SELECT = "select";
    /**
     * Fired when user deselects a TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * const treeView = new TreeView();
     * treeView.on('deselect', (item: TreeViewItem) => {
     *     console.log(`Deselected item ${item.text}`);
     * });
     * ```
     */
    static readonly EVENT_DESELECT = "deselect";
    /**
     * Fired when user renames a TreeViewItem.
     *
     * @event
     * @example
     * ```ts
     * const treeView = new TreeView();
     * treeView.on('rename', (item: TreeViewItem, name: string) => {
     *     console.log(`Renamed item to ${name}`);
     * });
     * ```
     */
    static readonly EVENT_RENAME = "rename";
    protected _selectedItems: TreeViewItem[];
    protected _dragItems: TreeViewItem[];
    protected _allowDrag: boolean;
    protected _allowReordering: boolean;
    protected _allowRenaming: boolean;
    protected _dragging: boolean;
    protected _dragOverItem: TreeViewItem;
    protected _dragArea: string;
    protected _dragScroll: number;
    protected _dragScrollInterval: number;
    protected _dragHandle: Element;
    protected _dragScrollElement: any;
    protected _onContextMenu: (evt: MouseEvent, item: TreeViewItem) => void;
    protected _onReparentFn: any;
    protected _pressedCtrl: boolean;
    protected _pressedShift: boolean;
    protected _filter: string;
    protected _filterResults: TreeViewItem[];
    protected _wasDraggingAllowedBeforeFiltering: boolean;
    /**
     * Creates a new TreeView.
     *
     * @param args - The arguments.
     */
    constructor(args?: Readonly<TreeViewArgs>);
    destroy(): void;
    protected _updateModifierKeys: (evt: KeyboardEvent) => void;
    /**
     * Finds the next tree item that is not currently hidden.
     *
     * @param currentItem - The current tree item.
     * @returns The next visible tree item.
     */
    protected _findNextVisibleTreeItem(currentItem: TreeViewItem): TreeViewItem;
    /**
     * Finds the last visible child tree item of the specified tree item.
     *
     * @param currentItem - The current item.
     * @returns The last child item.
     */
    protected _findLastVisibleChildTreeItem(currentItem: TreeViewItem): TreeViewItem;
    /**
     * Finds the previous visible tree item of the specified tree item.
     *
     * @param currentItem - The current tree item.
     * @returns The previous item.
     */
    protected _findPreviousVisibleTreeItem(currentItem: TreeViewItem): TreeViewItem;
    /**
     * Gets the visible tree items between the specified start and end tree items.
     *
     * @param startChild - The start tree item.
     * @param endChild - The end tree item.
     */
    protected _getChildrenRange(startChild: TreeViewItem, endChild: TreeViewItem): TreeViewItem[];
    protected _onAppendChild(element: Element): void;
    protected _onRemoveChild(element: Element): void;
    protected _onAppendTreeViewItem(item: TreeViewItem): void;
    protected _onRemoveTreeViewItem(item: TreeViewItem): void;
    protected _onChildKeyDown(evt: KeyboardEvent, item: TreeViewItem): void;
    protected _onChildClick(evt: MouseEvent, item: TreeViewItem): void;
    /**
     * Call specified function on every child TreeViewItem by traversing the hierarchy depth first.
     *
     * @param fn - The function to call. The function takes the TreeViewItem as an argument.
     */
    protected _traverseDepthFirst(fn: (item: TreeViewItem) => void): void;
    /**
     * Do a depth first traversal of all tree items
     * and assign an order to them so that we know which one
     * is above the other. Performance wise this means it traverses
     * all tree items every time however seems to be pretty fast even with 15 - 20 K entities.
     */
    protected _getTreeOrder(): Map<TreeViewItem, number>;
    protected _getChildIndex(item: TreeViewItem, parent: TreeViewItem): number;
    protected _onChildDragStart(evt: MouseEvent, item: TreeViewItem): void;
    protected _onChildDragEnd(evt: MouseEvent, item: TreeViewItem): void;
    protected _onChildDragOver(evt: MouseEvent, item: TreeViewItem): void;
    protected _onMouseLeave: (evt: MouseEvent) => void;
    protected _onMouseMove: (evt: MouseEvent) => void;
    protected _scrollWhileDragging(): void;
    protected _onDragMove: (evt: MouseEvent) => void;
    protected _updateDragHandle(dragOverItem?: TreeViewItem, force?: boolean): void;
    /**
     * Opens all the parents of the specified item.
     *
     * @param endItem - The end tree view item.
     */
    protected _openHierarchy(endItem: TreeViewItem): void;
    /**
     * Selects a tree view item.
     *
     * @param item - The tree view item.
     */
    protected _selectSingleItem(item: TreeViewItem): void;
    /**
     * Called when a child tree view item is selected.
     *
     * @param item - The tree view item.
     */
    protected _onChildSelected(item: TreeViewItem): void;
    /**
     * Called when a child tree view item is deselected.
     *
     * @param item - The tree view item.
     */
    protected _onChildDeselected(item: TreeViewItem): void;
    /**
     * Called when a child tree view item is renamed.
     *
     * @param item - The tree view item.
     * @param newName - The new name.
     */
    protected _onChildRename(item: TreeViewItem, newName: string): void;
    protected _searchItems(searchArr: [string, TreeViewItem][], filter: string): void;
    /**
     * Searches the treeview.
     *
     * @param filter - The search filter.
     */
    protected _applyFilter(filter: string): void;
    /**
     * Clears search filter.
     */
    protected _clearFilter(): void;
    /**
     * Show the drag handle on the given tree item.
     *
     * @param treeItem - The tree item.
     */
    showDragHandle(treeItem: TreeViewItem): void;
    /**
     * Deselects all selected tree view items.
     */
    deselect(): void;
    /**
     * Removes all child tree view items.
     */
    clearTreeItems(): void;
    /**
     * Sets whether dragging a TreeViewItem is allowed.
     */
    set allowDrag(value: boolean);
    /**
     * Gets whether dragging a TreeViewItem is allowed.
     */
    get allowDrag(): boolean;
    /**
     * Sets whether reordering TreeViewItems is allowed.
     */
    set allowReordering(value: boolean);
    /**
     * Gets whether reordering TreeViewItems is allowed.
     */
    get allowReordering(): boolean;
    /**
     * Sets whether renaming TreeViewItems is allowed by double clicking on them.
     */
    set allowRenaming(value: boolean);
    /**
     * Gets whether renaming TreeViewItems is allowed by double clicking on them.
     */
    get allowRenaming(): boolean;
    /**
     * Sets whether a TreeViewItem is currently being dragged.
     */
    set isDragging(value: boolean);
    /**
     * Gets whether a TreeViewItem is currently being dragged.
     */
    get isDragging(): boolean;
    /**
     * Gets all of the currently selected TreeViewItems.
     */
    get selected(): Array<TreeViewItem>;
    /**
     * Sets the filter that searches TreeViewItems and only shows the ones that are relevant to the filter.
     */
    set filter(value: string);
    /**
     * Gets the filter that searches TreeViewItems and only shows the ones that are relevant to the filter.
     */
    get filter(): string;
    /**
     * Gets whether Ctrl is currently pressed.
     */
    get pressedCtrl(): boolean;
    /**
     * Gets whether Shift is currently pressed.
     */
    get pressedShift(): boolean;
}
export { TreeView, TreeViewArgs };
